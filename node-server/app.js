// /const express = require('express');
import express from "express"
import expressLayouts from 'express-ejs-layouts';
// const mongoose = require('mongoose');
import passport from 'passport';
// import pas from "./lib/passport.js"
import LocalStrategy from 'passport-local'
import flash from 'connect-flash';
import session from 'express-session';
import dbManager from "./lib/db.js";
import bcrypt from "bcrypt";
import { router as indexRouter } from "./routes/index.js"
import { router as userRouter } from "./routes/users.js"
import { ObjectId } from 'mongodb';
await dbManager.init();
const app = express();
import * as swaggerUi from 'swagger-ui-express';
import swaggerJsdoc from 'swagger-jsdoc';

import busboy from 'connect-busboy'; //middleware for form/file upload
// var path = require('path');     //used for file path
import fs from 'fs-extra';  

app.use(busboy()); 
passport.serializeUser(function (user, done) {
  done(null, user._id);
});

passport.deserializeUser(function (id, done) {
  deserialize(id, done);
});
async function deserialize(id, done) {

  const db = await dbManager.db();
  const userCollection = db.collection(`Users`);
  const cursor = await userCollection.find(ObjectId(id))
  const user = await cursor.toArray();
  done(null, user[0]);
}
passport.use(
  new LocalStrategy.Strategy({ usernameField: 'email' }, (email, password, done) => {
    // Match user
    auth(email, password, done).then((user) => {
      if (!user) {
        return done(null, false, { message: 'That email is not registered' });
      }
      bcrypt.compare(password, user.password, (err, isMath) => {
        if (err) throw err;
        if (isMath) return done(null, user);
        else return done(null, false, { message: 'Password incorrect' });

      });

    })
  })
)
async function auth(email, password, done) {
  try {
    const db = await dbManager.db();
    const userCollection = db.collection(`Users`);
    const user = await userCollection.findOne({ email: email })
    return user;

  } catch (e) {
    console.log(e);
  }

}
const db = await dbManager.db();
// EJS
app.use(expressLayouts);
app.set('view engine', 'ejs');

// Express body parser
app.use(express.urlencoded({ extended: true }));

// Express session
const oneDay = 1000 * 60 * 60 * 24;

//session middleware
app.use(session({
  secret: "thisismysecrctekeyfhrgfgrfrty84fwir767",
  saveUninitialized: true,
  cookie: { maxAge: oneDay },
  resave: false
}));

// Passport middleware
app.use(passport.initialize());
app.use(passport.session());
//swagger
const options = {
  swaggerDefinition: {
    // Like the one described here: https://swagger.io/specification/#infoObject
    info: {
      title: 'PBD',
      version: '1.0.0',
      description: 'Test Express API with autogenerated swagger doc',
    },
  },
  // List of files to be processes. You can also set globs './routes/*.js'
  apis: ['node-server/routes/*.js','node-server/app.js'],
};
app.use('/', indexRouter);
app.use('/users', userRouter);
const specs = swaggerJsdoc(options);
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));

/**
 * @swagger
 * /upload:
 *   post:
 *       descripton: Uploads a file.
 *       consumes: 
 *          - multipart/form-data
 *       parameters:
 *          - in: formData
 *            name: upfile
 *            type: file
 *       responses:
 *           200:
 *               description: Sucesfull login
 *           401:
 *               description: Cant login
 *               content:
 *                   application/json:
 *               schema:
 *                   type: object
 */
app.post('/upload',function (req, res, next) {
  var fstream;
  req.pipe(req.busboy);
  req.busboy.on('file', function (fieldname, file, filename) {
      console.log("Uploading: " + filename);

      //Path where image will be uploaded
      fstream = fs.createWriteStream('node-server/img/' + filename);
      file.pipe(fstream);
      fstream.on('close', function () {    
          console.log("Upload Finished of " + filename);              
          res.redirect('back');           //where to go next
      });
  });
});

const PORT = process.env.PORT || 5000;

app.listen(PORT, console.log(`Server running on  ${PORT}`));
